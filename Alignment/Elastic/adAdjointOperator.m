function [v,dv]=adAdjointOperator(v,w,sp,L,G,ups,F,FH)

%ADDUALOPERATOR   Computes the adjoint ad operator from the negative dual 
%of the ad operator (ad*), with ad operator being the negative of the Lie 
%bracket (derivative of w along the flow generated by v), following [1] M 
%Hernandez, "PDE-constrained LDDMM via geodesic shooting and inexact 
%Gauss–Newton–Krylov optimization using the incremental adjoint Jacobi 
%equations," Phys Med Biol, 64:025002(16p), 2019; [2] MI Miller, A Trouve, 
%L Younes, "Geodesic Shooting for Computational Anatomy," J Math Imaging 
%Vis, 24:209-228 (2006); [3] M Zhang, PT Fletcher, "Fast Diffeomorphic 
%Image Registration via Fourier-Approximated Lie Algebras," 127:61-73, 
%2019. This is (1/L)ad*_v(Lw).
%   [V,DV]=ADADJOINTOPERATOR(V,W,SP,L,G,UPS)
%   * V is a field in Fourier space
%   * W is another field in Fourier space
%   * SP is the spacing of the spatial grid
%   * L is a symmetric positive-definite differential operator
%   * G are first order centered finite difference filters along different
%   dimensions
%   * UPS is a padding factor for circular convolutions
%   ** V is the result of the application of the operator
%   ** DV is the spatial gradient of the original field V
%

ND=length(sp);
if isscalar(ups);ups=ups*ones(1,ND);end
N=size(v);N=N(1:ND);

if ~any(ups==0)
    M=round(N.*ups);ups=M./N;
else
    M=N;
end
if nargin<7;F=buildMapSpace(v,1,M,N);FH=buildMapSpace(v,0,M,N);end

w=bsxfun(@times,w,L);
if any(ups==0);w=mapSpace(w,0,F,FH);v=mapSpace(v,0,F,FH);end
if nargout>=2;[v,dv]=adDualOperator(v,w,sp,G,ups,F,FH);else v=adDualOperator(v,w,sp,G,ups,F,FH);end
if any(ups==0);v=mapSpace(v,1,F,FH);end
v=bsxfun(@times,v,1./L);

    
